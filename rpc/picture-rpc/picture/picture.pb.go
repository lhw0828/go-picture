// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.3
// source: picture.proto

package picture

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 图片基础信息
type Picture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ThumbnailUrl  string                 `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Introduction  string                 `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Category      string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	PicSize       int64                  `protobuf:"varint,8,opt,name=pic_size,json=picSize,proto3" json:"pic_size,omitempty"`
	PicWidth      int32                  `protobuf:"varint,9,opt,name=pic_width,json=picWidth,proto3" json:"pic_width,omitempty"`
	PicHeight     int32                  `protobuf:"varint,10,opt,name=pic_height,json=picHeight,proto3" json:"pic_height,omitempty"`
	PicScale      float64                `protobuf:"fixed64,11,opt,name=pic_scale,json=picScale,proto3" json:"pic_scale,omitempty"`
	PicFormat     string                 `protobuf:"bytes,12,opt,name=pic_format,json=picFormat,proto3" json:"pic_format,omitempty"`
	PicColor      string                 `protobuf:"bytes,13,opt,name=pic_color,json=picColor,proto3" json:"pic_color,omitempty"`
	UserId        int64                  `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpaceId       int64                  `protobuf:"varint,15,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ReviewStatus  int32                  `protobuf:"varint,16,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`
	ReviewMessage string                 `protobuf:"bytes,17,opt,name=review_message,json=reviewMessage,proto3" json:"review_message,omitempty"`
	ReviewerId    int64                  `protobuf:"varint,18,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	CreateTime    int64                  `protobuf:"varint,19,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EditTime      int64                  `protobuf:"varint,20,opt,name=edit_time,json=editTime,proto3" json:"edit_time,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Picture) Reset() {
	*x = Picture{}
	mi := &file_picture_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Picture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Picture) ProtoMessage() {}

func (x *Picture) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Picture.ProtoReflect.Descriptor instead.
func (*Picture) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{0}
}

func (x *Picture) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Picture) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Picture) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Picture) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Picture) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Picture) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Picture) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Picture) GetPicSize() int64 {
	if x != nil {
		return x.PicSize
	}
	return 0
}

func (x *Picture) GetPicWidth() int32 {
	if x != nil {
		return x.PicWidth
	}
	return 0
}

func (x *Picture) GetPicHeight() int32 {
	if x != nil {
		return x.PicHeight
	}
	return 0
}

func (x *Picture) GetPicScale() float64 {
	if x != nil {
		return x.PicScale
	}
	return 0
}

func (x *Picture) GetPicFormat() string {
	if x != nil {
		return x.PicFormat
	}
	return ""
}

func (x *Picture) GetPicColor() string {
	if x != nil {
		return x.PicColor
	}
	return ""
}

func (x *Picture) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Picture) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *Picture) GetReviewStatus() int32 {
	if x != nil {
		return x.ReviewStatus
	}
	return 0
}

func (x *Picture) GetReviewMessage() string {
	if x != nil {
		return x.ReviewMessage
	}
	return ""
}

func (x *Picture) GetReviewerId() int64 {
	if x != nil {
		return x.ReviewerId
	}
	return 0
}

func (x *Picture) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Picture) GetEditTime() int64 {
	if x != nil {
		return x.EditTime
	}
	return 0
}

func (x *Picture) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UploadPictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          []byte                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	PicName       string                 `protobuf:"bytes,2,opt,name=picName,proto3" json:"picName,omitempty"`
	SpaceId       int64                  `protobuf:"varint,3,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	UserId        int64                  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"` // 添加用户ID字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadPictureRequest) Reset() {
	*x = UploadPictureRequest{}
	mi := &file_picture_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPictureRequest) ProtoMessage() {}

func (x *UploadPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPictureRequest.ProtoReflect.Descriptor instead.
func (*UploadPictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{1}
}

func (x *UploadPictureRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UploadPictureRequest) GetPicName() string {
	if x != nil {
		return x.PicName
	}
	return ""
}

func (x *UploadPictureRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *UploadPictureRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UploadPictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Picture       *Picture               `protobuf:"bytes,1,opt,name=picture,proto3" json:"picture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadPictureResponse) Reset() {
	*x = UploadPictureResponse{}
	mi := &file_picture_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPictureResponse) ProtoMessage() {}

func (x *UploadPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPictureResponse.ProtoReflect.Descriptor instead.
func (*UploadPictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{2}
}

func (x *UploadPictureResponse) GetPicture() *Picture {
	if x != nil {
		return x.Picture
	}
	return nil
}

type GetPictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPictureRequest) Reset() {
	*x = GetPictureRequest{}
	mi := &file_picture_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPictureRequest) ProtoMessage() {}

func (x *GetPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPictureRequest.ProtoReflect.Descriptor instead.
func (*GetPictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{3}
}

func (x *GetPictureRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Picture       *Picture               `protobuf:"bytes,1,opt,name=picture,proto3" json:"picture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPictureResponse) Reset() {
	*x = GetPictureResponse{}
	mi := &file_picture_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPictureResponse) ProtoMessage() {}

func (x *GetPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPictureResponse.ProtoReflect.Descriptor instead.
func (*GetPictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{4}
}

func (x *GetPictureResponse) GetPicture() *Picture {
	if x != nil {
		return x.Picture
	}
	return nil
}

type EditPictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Introduction  string                 `protobuf:"bytes,3,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Category      string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditPictureRequest) Reset() {
	*x = EditPictureRequest{}
	mi := &file_picture_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPictureRequest) ProtoMessage() {}

func (x *EditPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPictureRequest.ProtoReflect.Descriptor instead.
func (*EditPictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{5}
}

func (x *EditPictureRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditPictureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditPictureRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *EditPictureRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EditPictureRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EditPictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Picture       *Picture               `protobuf:"bytes,1,opt,name=picture,proto3" json:"picture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditPictureResponse) Reset() {
	*x = EditPictureResponse{}
	mi := &file_picture_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPictureResponse) ProtoMessage() {}

func (x *EditPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPictureResponse.ProtoReflect.Descriptor instead.
func (*EditPictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{6}
}

func (x *EditPictureResponse) GetPicture() *Picture {
	if x != nil {
		return x.Picture
	}
	return nil
}

type DeletePictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePictureRequest) Reset() {
	*x = DeletePictureRequest{}
	mi := &file_picture_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePictureRequest) ProtoMessage() {}

func (x *DeletePictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePictureRequest.ProtoReflect.Descriptor instead.
func (*DeletePictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePictureRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePictureResponse) Reset() {
	*x = DeletePictureResponse{}
	mi := &file_picture_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePictureResponse) ProtoMessage() {}

func (x *DeletePictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePictureResponse.ProtoReflect.Descriptor instead.
func (*DeletePictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePictureResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReviewPictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReviewStatus  int32                  `protobuf:"varint,2,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`
	ReviewMessage string                 `protobuf:"bytes,3,opt,name=review_message,json=reviewMessage,proto3" json:"review_message,omitempty"`
	ReviewerId    int64                  `protobuf:"varint,4,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewPictureRequest) Reset() {
	*x = ReviewPictureRequest{}
	mi := &file_picture_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPictureRequest) ProtoMessage() {}

func (x *ReviewPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPictureRequest.ProtoReflect.Descriptor instead.
func (*ReviewPictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{9}
}

func (x *ReviewPictureRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReviewPictureRequest) GetReviewStatus() int32 {
	if x != nil {
		return x.ReviewStatus
	}
	return 0
}

func (x *ReviewPictureRequest) GetReviewMessage() string {
	if x != nil {
		return x.ReviewMessage
	}
	return ""
}

func (x *ReviewPictureRequest) GetReviewerId() int64 {
	if x != nil {
		return x.ReviewerId
	}
	return 0
}

type ReviewPictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Picture       *Picture               `protobuf:"bytes,1,opt,name=picture,proto3" json:"picture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewPictureResponse) Reset() {
	*x = ReviewPictureResponse{}
	mi := &file_picture_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPictureResponse) ProtoMessage() {}

func (x *ReviewPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPictureResponse.ProtoReflect.Descriptor instead.
func (*ReviewPictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{10}
}

func (x *ReviewPictureResponse) GetPicture() *Picture {
	if x != nil {
		return x.Picture
	}
	return nil
}

type EditPictureByBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PictureIdList []int64                `protobuf:"varint,1,rep,packed,name=picture_id_list,json=pictureIdList,proto3" json:"picture_id_list,omitempty"`
	SpaceId       int64                  `protobuf:"varint,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditPictureByBatchRequest) Reset() {
	*x = EditPictureByBatchRequest{}
	mi := &file_picture_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditPictureByBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPictureByBatchRequest) ProtoMessage() {}

func (x *EditPictureByBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPictureByBatchRequest.ProtoReflect.Descriptor instead.
func (*EditPictureByBatchRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{11}
}

func (x *EditPictureByBatchRequest) GetPictureIdList() []int64 {
	if x != nil {
		return x.PictureIdList
	}
	return nil
}

func (x *EditPictureByBatchRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *EditPictureByBatchRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EditPictureByBatchRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EditPictureByBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditPictureByBatchResponse) Reset() {
	*x = EditPictureByBatchResponse{}
	mi := &file_picture_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditPictureByBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPictureByBatchResponse) ProtoMessage() {}

func (x *EditPictureByBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPictureByBatchResponse.ProtoReflect.Descriptor instead.
func (*EditPictureByBatchResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{12}
}

func (x *EditPictureByBatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListPictureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchText    string                 `protobuf:"bytes,3,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	SpaceId       int64                  `protobuf:"varint,4,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Category      string                 `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	ReviewStatus  int32                  `protobuf:"varint,7,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`
	SortField     string                 `protobuf:"bytes,8,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortOrder     string                 `protobuf:"bytes,9,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPictureRequest) Reset() {
	*x = ListPictureRequest{}
	mi := &file_picture_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPictureRequest) ProtoMessage() {}

func (x *ListPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPictureRequest.ProtoReflect.Descriptor instead.
func (*ListPictureRequest) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{13}
}

func (x *ListPictureRequest) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ListPictureRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPictureRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListPictureRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *ListPictureRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListPictureRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListPictureRequest) GetReviewStatus() int32 {
	if x != nil {
		return x.ReviewStatus
	}
	return 0
}

func (x *ListPictureRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListPictureRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

type ListPictureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Picture             `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Current       int64                  `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	PageSize      int64                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPictureResponse) Reset() {
	*x = ListPictureResponse{}
	mi := &file_picture_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPictureResponse) ProtoMessage() {}

func (x *ListPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_picture_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPictureResponse.ProtoReflect.Descriptor instead.
func (*ListPictureResponse) Descriptor() ([]byte, []int) {
	return file_picture_proto_rawDescGZIP(), []int{14}
}

func (x *ListPictureResponse) GetRecords() []*Picture {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListPictureResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPictureResponse) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ListPictureResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_picture_proto protoreflect.FileDescriptor

var file_picture_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x69, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x69, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69,
	0x63, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x69, 0x63, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x15, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x15, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x19, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x36, 0x0a, 0x1a, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x32, 0xba, 0x04, 0x0a, 0x0e, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1b, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_picture_proto_rawDescOnce sync.Once
	file_picture_proto_rawDescData = file_picture_proto_rawDesc
)

func file_picture_proto_rawDescGZIP() []byte {
	file_picture_proto_rawDescOnce.Do(func() {
		file_picture_proto_rawDescData = protoimpl.X.CompressGZIP(file_picture_proto_rawDescData)
	})
	return file_picture_proto_rawDescData
}

var file_picture_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_picture_proto_goTypes = []any{
	(*Picture)(nil),                    // 0: picture.Picture
	(*UploadPictureRequest)(nil),       // 1: picture.UploadPictureRequest
	(*UploadPictureResponse)(nil),      // 2: picture.UploadPictureResponse
	(*GetPictureRequest)(nil),          // 3: picture.GetPictureRequest
	(*GetPictureResponse)(nil),         // 4: picture.GetPictureResponse
	(*EditPictureRequest)(nil),         // 5: picture.EditPictureRequest
	(*EditPictureResponse)(nil),        // 6: picture.EditPictureResponse
	(*DeletePictureRequest)(nil),       // 7: picture.DeletePictureRequest
	(*DeletePictureResponse)(nil),      // 8: picture.DeletePictureResponse
	(*ReviewPictureRequest)(nil),       // 9: picture.ReviewPictureRequest
	(*ReviewPictureResponse)(nil),      // 10: picture.ReviewPictureResponse
	(*EditPictureByBatchRequest)(nil),  // 11: picture.EditPictureByBatchRequest
	(*EditPictureByBatchResponse)(nil), // 12: picture.EditPictureByBatchResponse
	(*ListPictureRequest)(nil),         // 13: picture.ListPictureRequest
	(*ListPictureResponse)(nil),        // 14: picture.ListPictureResponse
}
var file_picture_proto_depIdxs = []int32{
	0,  // 0: picture.UploadPictureResponse.picture:type_name -> picture.Picture
	0,  // 1: picture.GetPictureResponse.picture:type_name -> picture.Picture
	0,  // 2: picture.EditPictureResponse.picture:type_name -> picture.Picture
	0,  // 3: picture.ReviewPictureResponse.picture:type_name -> picture.Picture
	0,  // 4: picture.ListPictureResponse.records:type_name -> picture.Picture
	1,  // 5: picture.PictureService.UploadPicture:input_type -> picture.UploadPictureRequest
	3,  // 6: picture.PictureService.GetPicture:input_type -> picture.GetPictureRequest
	5,  // 7: picture.PictureService.EditPicture:input_type -> picture.EditPictureRequest
	7,  // 8: picture.PictureService.DeletePicture:input_type -> picture.DeletePictureRequest
	9,  // 9: picture.PictureService.ReviewPicture:input_type -> picture.ReviewPictureRequest
	11, // 10: picture.PictureService.EditPictureByBatch:input_type -> picture.EditPictureByBatchRequest
	13, // 11: picture.PictureService.ListPicture:input_type -> picture.ListPictureRequest
	2,  // 12: picture.PictureService.UploadPicture:output_type -> picture.UploadPictureResponse
	4,  // 13: picture.PictureService.GetPicture:output_type -> picture.GetPictureResponse
	6,  // 14: picture.PictureService.EditPicture:output_type -> picture.EditPictureResponse
	8,  // 15: picture.PictureService.DeletePicture:output_type -> picture.DeletePictureResponse
	10, // 16: picture.PictureService.ReviewPicture:output_type -> picture.ReviewPictureResponse
	12, // 17: picture.PictureService.EditPictureByBatch:output_type -> picture.EditPictureByBatchResponse
	14, // 18: picture.PictureService.ListPicture:output_type -> picture.ListPictureResponse
	12, // [12:19] is the sub-list for method output_type
	5,  // [5:12] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_picture_proto_init() }
func file_picture_proto_init() {
	if File_picture_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_picture_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_picture_proto_goTypes,
		DependencyIndexes: file_picture_proto_depIdxs,
		MessageInfos:      file_picture_proto_msgTypes,
	}.Build()
	File_picture_proto = out.File
	file_picture_proto_rawDesc = nil
	file_picture_proto_goTypes = nil
	file_picture_proto_depIdxs = nil
}
