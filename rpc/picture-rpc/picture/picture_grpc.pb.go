// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: picture.proto

package picture

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PictureService_UploadPicture_FullMethodName      = "/picture.PictureService/UploadPicture"
	PictureService_GetPicture_FullMethodName         = "/picture.PictureService/GetPicture"
	PictureService_EditPicture_FullMethodName        = "/picture.PictureService/EditPicture"
	PictureService_DeletePicture_FullMethodName      = "/picture.PictureService/DeletePicture"
	PictureService_ReviewPicture_FullMethodName      = "/picture.PictureService/ReviewPicture"
	PictureService_EditPictureByBatch_FullMethodName = "/picture.PictureService/EditPictureByBatch"
	PictureService_ListPicture_FullMethodName        = "/picture.PictureService/ListPicture"
)

// PictureServiceClient is the client API for PictureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 图片服务
type PictureServiceClient interface {
	// 上传图片
	UploadPicture(ctx context.Context, in *UploadPictureRequest, opts ...grpc.CallOption) (*UploadPictureResponse, error)
	// 获取图片信息
	GetPicture(ctx context.Context, in *GetPictureRequest, opts ...grpc.CallOption) (*GetPictureResponse, error)
	// 编辑图片
	EditPicture(ctx context.Context, in *EditPictureRequest, opts ...grpc.CallOption) (*EditPictureResponse, error)
	// 删除图片
	DeletePicture(ctx context.Context, in *DeletePictureRequest, opts ...grpc.CallOption) (*DeletePictureResponse, error)
	// 图片审核
	ReviewPicture(ctx context.Context, in *ReviewPictureRequest, opts ...grpc.CallOption) (*ReviewPictureResponse, error)
	// 批量编辑图片
	EditPictureByBatch(ctx context.Context, in *EditPictureByBatchRequest, opts ...grpc.CallOption) (*EditPictureByBatchResponse, error)
	// 分页获取图片列表
	ListPicture(ctx context.Context, in *ListPictureRequest, opts ...grpc.CallOption) (*ListPictureResponse, error)
}

type pictureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPictureServiceClient(cc grpc.ClientConnInterface) PictureServiceClient {
	return &pictureServiceClient{cc}
}

func (c *pictureServiceClient) UploadPicture(ctx context.Context, in *UploadPictureRequest, opts ...grpc.CallOption) (*UploadPictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPictureResponse)
	err := c.cc.Invoke(ctx, PictureService_UploadPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) GetPicture(ctx context.Context, in *GetPictureRequest, opts ...grpc.CallOption) (*GetPictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPictureResponse)
	err := c.cc.Invoke(ctx, PictureService_GetPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) EditPicture(ctx context.Context, in *EditPictureRequest, opts ...grpc.CallOption) (*EditPictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditPictureResponse)
	err := c.cc.Invoke(ctx, PictureService_EditPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) DeletePicture(ctx context.Context, in *DeletePictureRequest, opts ...grpc.CallOption) (*DeletePictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePictureResponse)
	err := c.cc.Invoke(ctx, PictureService_DeletePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) ReviewPicture(ctx context.Context, in *ReviewPictureRequest, opts ...grpc.CallOption) (*ReviewPictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewPictureResponse)
	err := c.cc.Invoke(ctx, PictureService_ReviewPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) EditPictureByBatch(ctx context.Context, in *EditPictureByBatchRequest, opts ...grpc.CallOption) (*EditPictureByBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditPictureByBatchResponse)
	err := c.cc.Invoke(ctx, PictureService_EditPictureByBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) ListPicture(ctx context.Context, in *ListPictureRequest, opts ...grpc.CallOption) (*ListPictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPictureResponse)
	err := c.cc.Invoke(ctx, PictureService_ListPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PictureServiceServer is the server API for PictureService service.
// All implementations must embed UnimplementedPictureServiceServer
// for forward compatibility.
//
// 图片服务
type PictureServiceServer interface {
	// 上传图片
	UploadPicture(context.Context, *UploadPictureRequest) (*UploadPictureResponse, error)
	// 获取图片信息
	GetPicture(context.Context, *GetPictureRequest) (*GetPictureResponse, error)
	// 编辑图片
	EditPicture(context.Context, *EditPictureRequest) (*EditPictureResponse, error)
	// 删除图片
	DeletePicture(context.Context, *DeletePictureRequest) (*DeletePictureResponse, error)
	// 图片审核
	ReviewPicture(context.Context, *ReviewPictureRequest) (*ReviewPictureResponse, error)
	// 批量编辑图片
	EditPictureByBatch(context.Context, *EditPictureByBatchRequest) (*EditPictureByBatchResponse, error)
	// 分页获取图片列表
	ListPicture(context.Context, *ListPictureRequest) (*ListPictureResponse, error)
	mustEmbedUnimplementedPictureServiceServer()
}

// UnimplementedPictureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPictureServiceServer struct{}

func (UnimplementedPictureServiceServer) UploadPicture(context.Context, *UploadPictureRequest) (*UploadPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPicture not implemented")
}
func (UnimplementedPictureServiceServer) GetPicture(context.Context, *GetPictureRequest) (*GetPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicture not implemented")
}
func (UnimplementedPictureServiceServer) EditPicture(context.Context, *EditPictureRequest) (*EditPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPicture not implemented")
}
func (UnimplementedPictureServiceServer) DeletePicture(context.Context, *DeletePictureRequest) (*DeletePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePicture not implemented")
}
func (UnimplementedPictureServiceServer) ReviewPicture(context.Context, *ReviewPictureRequest) (*ReviewPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewPicture not implemented")
}
func (UnimplementedPictureServiceServer) EditPictureByBatch(context.Context, *EditPictureByBatchRequest) (*EditPictureByBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPictureByBatch not implemented")
}
func (UnimplementedPictureServiceServer) ListPicture(context.Context, *ListPictureRequest) (*ListPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPicture not implemented")
}
func (UnimplementedPictureServiceServer) mustEmbedUnimplementedPictureServiceServer() {}
func (UnimplementedPictureServiceServer) testEmbeddedByValue()                        {}

// UnsafePictureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PictureServiceServer will
// result in compilation errors.
type UnsafePictureServiceServer interface {
	mustEmbedUnimplementedPictureServiceServer()
}

func RegisterPictureServiceServer(s grpc.ServiceRegistrar, srv PictureServiceServer) {
	// If the following call pancis, it indicates UnimplementedPictureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PictureService_ServiceDesc, srv)
}

func _PictureService_UploadPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).UploadPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_UploadPicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).UploadPicture(ctx, req.(*UploadPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_GetPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).GetPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_GetPicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).GetPicture(ctx, req.(*GetPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_EditPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).EditPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_EditPicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).EditPicture(ctx, req.(*EditPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_DeletePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).DeletePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_DeletePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).DeletePicture(ctx, req.(*DeletePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_ReviewPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).ReviewPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_ReviewPicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).ReviewPicture(ctx, req.(*ReviewPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_EditPictureByBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPictureByBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).EditPictureByBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_EditPictureByBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).EditPictureByBatch(ctx, req.(*EditPictureByBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_ListPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).ListPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_ListPicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).ListPicture(ctx, req.(*ListPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PictureService_ServiceDesc is the grpc.ServiceDesc for PictureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PictureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "picture.PictureService",
	HandlerType: (*PictureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPicture",
			Handler:    _PictureService_UploadPicture_Handler,
		},
		{
			MethodName: "GetPicture",
			Handler:    _PictureService_GetPicture_Handler,
		},
		{
			MethodName: "EditPicture",
			Handler:    _PictureService_EditPicture_Handler,
		},
		{
			MethodName: "DeletePicture",
			Handler:    _PictureService_DeletePicture_Handler,
		},
		{
			MethodName: "ReviewPicture",
			Handler:    _PictureService_ReviewPicture_Handler,
		},
		{
			MethodName: "EditPictureByBatch",
			Handler:    _PictureService_EditPictureByBatch_Handler,
		},
		{
			MethodName: "ListPicture",
			Handler:    _PictureService_ListPicture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "picture.proto",
}
