// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package server

import (
	"context"

	"picture/rpc/user-rpc/internal/logic"
	"picture/rpc/user-rpc/internal/svc"
	"picture/rpc/user-rpc/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 基础功能
func (s *UserServiceServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServiceServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServiceServer) GetCurrentUser(ctx context.Context, in *user.GetUserByIdRequest) (*user.UserInfo, error) {
	l := logic.NewGetCurrentUserLogic(ctx, s.svcCtx)
	return l.GetCurrentUser(in)
}

func (s *UserServiceServer) Logout(ctx context.Context, in *user.LogoutRequest) (*user.BaseResponse, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// 用户管理功能
func (s *UserServiceServer) AddUser(ctx context.Context, in *user.UserAddRequest) (*user.RegisterResponse, error) {
	l := logic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserServiceServer) UpdateUser(ctx context.Context, in *user.UserUpdateRequest) (*user.BaseResponse, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *user.DeleteUserRequest) (*user.BaseResponse, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) ListUserByPage(ctx context.Context, in *user.UserQueryRequest) (*user.UserQueryResponse, error) {
	l := logic.NewListUserByPageLogic(ctx, s.svcCtx)
	return l.ListUserByPage(in)
}
